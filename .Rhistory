a <<- 2
plusFunctions <- function (){
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
#the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
a = plusFunctions()
a$plustwo()
a$plustwo(2)
a$plustwo(7)
a$plusthree(7)
get <- function() x
a <- makeVector(c(4,5,2))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a <- makeVector(c(4,5,2))
a$get()
a$getmean()
a$set(8,7,6,4)
a$set(c(8,7,6,4))
a$get()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
cachemean(a)
f
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
a
a <- makeVector(c(1,2,3,4))
cachmean(a)
cachemean(a)
a$setmean(44)
cachmean(a)
cachemean(a)
a$setmean(NULL)
cachemean(a)
matrix()
matrix?
matrix()?
makeCacheMatrix <- function(x = matrix()) {
invMatrix <- NULL
set <- function(y = matrix()) {
x <<- y
invMatrix <<- NULL
}
get <- function() x
setInvMatrix <- function(y = matrix()) invMatrix <<- y
getInvMatrix <- function() invMatrix
list(set = set, get = get,
setInvMatrix = setInvMatrix,
getInvMatrix = getInvMatrix)
}
x = matrix(1:4,2,2)
y = matrix(5:8,2,2)
z = makeCacheMatrix(x)
z$get()
z$set(27:30,2,2)
z$set(matrix(27:30,2,2))
z$setInvMatrix(y)
z$getInvMatrix()
x = matrix(1:4,2,2)
solve(x)
y = solve(x)
x * y
x .* y
x %*% y
x
z.makeCacheMatrix(x)
##function to store matrix & its inverse
makeCacheMatrix <- function(x = matrix()) {
#inverse matrix variable
invMatrix <- NULL
#store matrix
set <- function(y = matrix()) {
x <<- y
invMatrix <<- NULL
}
#get stored matrix
get <- function() x
#store inverse matrix
setInvMatrix <- function(y = matrix()) invMatrix <<- y
#get stored inverse matrix
getInvMatrix <- function() invMatrix
#list of functions
list(set = set, get = get,
setInvMatrix = setInvMatrix,
getInvMatrix = getInvMatrix)
}
##function to store inverse matrix if available; otherwise, calculate it
cacheSolve <- function(x = matrix(), ...) {
#get inverse matrix
invMatrix <- x$getInvMatrix()
#if available, save it
if(!is.null(invMatrix)) {
message("getting cached data")
return(invMatrix)
}
#otherwise, calculate it
else {
baseMatrix <- x$get()
invMatrix <- solve(x, ...)
x$setInvMatrix(invMatrix)
return(invMatrix)
}
}
z.makeCacheMatrix(x)
z = makeCacheMatrix(x)
z.get()
z$get()
z$getInvMatrix()
z$set(matrix(c(3,4,5,6),2,2))
z$get()
z$setInvMatrix(matrix(c(19,18,28,15),2,))
z$getInvMatrix()
cacheSolve(z)
z$setInvMatrix(NULL)
cacheSolve(z)
cacheSolve(z)
cacheSolve(z)
##function to store inverse matrix if available; otherwise, calculate it
cacheSolve <- function(x = matrix(), ...) {
#get inverse matrix
invMatrix <- x$getInvMatrix()
#if available, save it
if(!is.null(invMatrix)) {
message("getting cached data")
return(invMatrix)
}
#otherwise, calculate it
else {
baseMatrix <- x$get()
invMatrix <- solve(x)
x$setInvMatrix(invMatrix)
return(invMatrix)
}
}
cacheSolve(z)
z
cacheSolve <- function(x = matrix(), ...) {
#get inverse matrix
invMatrix <- x$getInvMatrix()
#if available, save it
if(!is.null(invMatrix)) {
message("getting cached data")
return(invMatrix)
}
#otherwise, calculate it
else {
baseMatrix <- x$get()
invMatrix <- solve(baseMatrix)
x$setInvMatrix(invMatrix)
return(invMatrix)
}
}
cacheSolve(z)
cacheSolve(z) %*% z
cacheSolve(z) %*% z.get()
cacheSolve(z) %*% z$get()
